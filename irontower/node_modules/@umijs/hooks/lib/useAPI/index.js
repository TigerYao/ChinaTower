"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.configRequest = void 0;

var _useAsync = _interopRequireDefault(require("../useAsync"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var globalMethod;

var configRequest = function configRequest(method) {
  globalMethod = method;
};

exports.configRequest = configRequest;

var useAPI = function useAPI(opt) {
  var requestMethod = opt.method || globalMethod || fetch;
  return (0, _useAsync.default)(
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var res;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return requestMethod(opt.url, opt.options);

          case 2:
            res = _context.sent;
            return _context.abrupt("return", res.json && typeof res.json === 'function' ? res.json() : res);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), [JSON.stringify(opt)], {
    manual: opt.manual,
    pollingInterval: opt.pollingInterval,
    onError: opt.onError,
    onSuccess: opt.onSuccess
  });
};

var _default = useAPI;
exports.default = _default;