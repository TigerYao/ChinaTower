"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getDFormType = exports.defaultFailed = exports.getFormItem = void 0;

require("antd-mobile/es/wing-blank/style");

var _wingBlank = _interopRequireDefault(require("antd-mobile/es/wing-blank"));

require("antd-mobile/es/list/style");

var _list = _interopRequireDefault(require("antd-mobile/es/list"));

require("antd-mobile/es/card/style");

var _card = _interopRequireDefault(require("antd-mobile/es/card"));

var _react = _interopRequireWildcard(require("react"));

var _rcFieldForm = _interopRequireDefault(require("rc-field-form"));

var _utils = require("./utils");

var _components = require("./components");

var _NewFieldPicker = _interopRequireDefault(require("./components/NewFieldPicker/NewFieldPicker"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var FormItemType = {
  input: _components.NomarInput,
  select: _components.NomarPicker,
  area: _components.NomarTextArea,
  date: _components.NomarDatePicker,
  switch: _components.NomarSwitch,
  radio: _components.NomarRadio,
  extraInput: _components.ExtraInput,
  rangeDatePicker: _components.RangeDatePicker,
  checkbox: _components.NomarCheckBox,
  coverRadio: _components.CoverRadio,
  image: _components.NomarImagePicker,
  custom: _components.NomarCustom,
  multiplePicker: _components.MultiplePicker,
  addressPicker: _components.AddressPicker
};
var nodeEnvIsDev = process.env.NODE_ENV === 'development';

var getFormItem = function getFormItem(formItem, allDisabled) {
  var type = formItem.type,
      _formItem$disabled = formItem.disabled,
      disabled = _formItem$disabled === void 0 ? allDisabled : _formItem$disabled,
      otherProps = _objectWithoutProperties(formItem, ["type", "disabled"]);

  var FormItemComponent = FormItemType[formItem.type];
  return /*#__PURE__*/_react.default.createElement(FormItemComponent, _extends({}, otherProps, {
    key: formItem.fieldProps,
    disabled: disabled
  }));
};

exports.getFormItem = getFormItem;

var defaultFailed = function defaultFailed(errorInfo, onFinishFailed) {
  if (!errorInfo || !errorInfo.errorFields || errorInfo.errorFields.length === 0) {
    if (onFinishFailed) onFinishFailed(errorInfo);
    return;
  }

  var scrollToField = function scrollToField(fieldKey) {
    var labelNode = document.getElementById("aliat-dform-".concat(fieldKey));

    if (labelNode) {
      labelNode.scrollIntoView(true);
    }
  };

  scrollToField(errorInfo.errorFields[0].name[0]);
  if (onFinishFailed) onFinishFailed(errorInfo);
};
/**
 * 根据传进来的数据判断 DForm 的类型
 * @param data
 */


exports.defaultFailed = defaultFailed;

var getDFormType = function getDFormType(data) {
  if (data instanceof Array) {
    var isTwoDimensional = false;
    var isCardListType = false;
    data.forEach(function (item) {
      if (item instanceof Array) {
        isTwoDimensional = true;
      } else {
        isCardListType = !item.fieldProps;
      }
    });

    if (isTwoDimensional) {
      return 'NORMALLIST';
    }

    return isCardListType ? 'CARDLIST' : 'NORMAL';
  }

  return 'CARD';
};

exports.getDFormType = getDFormType;

var changeData = function changeData(oldData, autoLineFeed) {
  return oldData.map(function (item) {
    if (item.positionType === 'vertical' || !autoLineFeed) return item;

    if (item.title) {
      var titleSize = (0, _utils.getByteLen)(item.title);

      if (titleSize >= 16) {
        item.positionType = 'vertical';
      } else if (item.type === 'input' || item.type === 'extraInput') {
        if (titleSize > 8) {
          item.labelNumber = titleSize / 2 + 1;
        } else {
          item.labelNumber = 5;
        }
      }
    }

    return item;
  });
};

var renderCardMain = function renderCardMain(formData, allDisabled, autoLineFeed) {
  var _ref = formData,
      data = _ref.data,
      otherData = _objectWithoutProperties(_ref, ["data"]);

  return /*#__PURE__*/_react.default.createElement(_wingBlank.default, {
    size: "lg"
  }, /*#__PURE__*/_react.default.createElement(_card.default, {
    style: {
      paddingBottom: 0
    }
  }, /*#__PURE__*/_react.default.createElement(_card.default.Header, otherData), /*#__PURE__*/_react.default.createElement(_list.default, null, changeData(data, autoLineFeed).map(function (item) {
    return getFormItem(item, allDisabled);
  }))));
};

var renderListMain = function renderListMain(formData, allDisabled, autoLineFeed) {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_list.default, null, changeData(formData, autoLineFeed).map(function (item) {
    return getFormItem(item, allDisabled);
  })));
};

var renderMainList = function renderMainList(type, formData, allDisabled, autoLineFeed) {
  if (type === 'CARD') {
    return renderCardMain(formData, allDisabled, autoLineFeed);
  }

  if (type === 'CARDLIST') {
    return formData.map(function (item) {
      return renderCardMain(item, allDisabled, autoLineFeed);
    });
  }

  if (type === 'NORMALLIST') {
    return formData.map(function (item) {
      return renderListMain(item, allDisabled, autoLineFeed);
    });
  }

  return renderListMain(formData, allDisabled, autoLineFeed);
};

var DynamicForm = function DynamicForm(_ref2) {
  var children = _ref2.children,
      _ref2$data = _ref2.data,
      data = _ref2$data === void 0 ? [] : _ref2$data,
      form = _ref2.form,
      _ref2$allDisabled = _ref2.allDisabled,
      allDisabled = _ref2$allDisabled === void 0 ? false : _ref2$allDisabled,
      _ref2$formsValues = _ref2.formsValues,
      formsValues = _ref2$formsValues === void 0 ? {} : _ref2$formsValues,
      onFinish = _ref2.onFinish,
      _onFinishFailed = _ref2.onFinishFailed,
      onValuesChange = _ref2.onValuesChange,
      isDev = _ref2.isDev,
      _ref2$autoLineFeed = _ref2.autoLineFeed,
      autoLineFeed = _ref2$autoLineFeed === void 0 ? true : _ref2$autoLineFeed;
  (0, _react.useEffect)(function () {
    form.setFieldsValue(formsValues);
  }, [formsValues]);
  var dFormType = getDFormType(data); // 开启条件是开发模式，并且data没有传，或者data传空数组[]

  var showAddItem = isDev || nodeEnvIsDev && (!data || data instanceof Array && data.length === 0);
  var rederChildren = renderMainList(dFormType, data, allDisabled, autoLineFeed);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_rcFieldForm.default, {
    form: form,
    initialValues: formsValues,
    onFinish: onFinish,
    onFinishFailed: function onFinishFailed(errorInfo) {
      return defaultFailed(errorInfo, _onFinishFailed);
    },
    onValuesChange: onValuesChange
  }, rederChildren, children), showAddItem && /*#__PURE__*/_react.default.createElement(_NewFieldPicker.default, null));
};

var _default = DynamicForm;
exports.default = _default;