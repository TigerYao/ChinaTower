"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("antd-mobile/es/button/style");

var _button = _interopRequireDefault(require("antd-mobile/es/button"));

require("antd-mobile/es/white-space/style");

var _whiteSpace = _interopRequireDefault(require("antd-mobile/es/white-space"));

var _react = _interopRequireDefault(require("react"));

var _rcFieldForm = require("rc-field-form");

var _umi = require("umi");

var _DynamicForm = _interopRequireDefault(require("../DynamicForm"));

var _Button2 = _interopRequireDefault(require("@/components/Button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var tailLayout = {
  wrapperCol: {
    offset: 2,
    span: 20
  }
};
var seasons = [[{
  label: '2013',
  value: '2013'
}, {
  label: '2014',
  value: '2014'
}], [{
  label: '春',
  value: '春'
}, {
  label: '夏',
  value: '夏'
}]];

var Page = function Page() {
  var _useForm = (0, _rcFieldForm.useForm)(),
      _useForm2 = _slicedToArray(_useForm, 1),
      form = _useForm2[0];

  var onFinish = function onFinish(values) {
    // eslint-disable-next-line no-console
    console.log('Success:', values);
  };

  var onFinishFailed = function onFinishFailed(errorInfo) {
    // eslint-disable-next-line no-console
    console.log('Failed:', errorInfo);
  };

  var radioList = [{
    label: '是',
    value: 'yes'
  }, {
    label: '否',
    value: 'no'
  }];
  var formsData = [{
    type: 'radio',
    fieldProps: 'userRadio1',
    required: true,
    data: radioList,
    title: '发票'
  }, {
    type: 'input',
    fieldProps: 'username',
    required: true,
    placeholder: '请输入',
    title: '用户名',
    inputType: 'text'
  }, {
    type: 'select',
    fieldProps: 'userdata',
    required: true,
    placeholder: '请选择',
    title: '用户数据',
    data: seasons
  }, {
    type: 'switch',
    fieldProps: 'userswitch',
    required: true,
    placeholder: '请选择',
    title: '用户选择'
  }, {
    type: 'text',
    fieldProps: 'useronlyread',
    placeholder: '请选择',
    title: '只读信息'
  }, {
    type: 'area',
    fieldProps: 'usertextarea',
    required: true,
    placeholder: '多行输入'
  }, {
    type: 'date',
    fieldProps: 'userDataPicker',
    required: true,
    placeholder: '请选择',
    title: '用户时间选择',
    modeType: 'datetime'
  }, {
    type: 'rangeDatePicker',
    fieldProps: 'datePicker1',
    fieldProps2: 'datePicker2',
    required: true,
    title: '时间区间',
    modeType: 'datetime'
  }];
  var formsValues = {
    username: 0,
    userdata: ['2013', '春']
  };
  var formProps = {
    onFinish: onFinish,
    data: formsData,
    onFinishFailed: onFinishFailed,
    formsValues: formsValues,
    form: form,
    isDev: false // allDisabled: true,

  };
  var comProps = {
    fieldProps: 'datePicker111',
    required: true,
    title: '时间区间'
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_DynamicForm.default, formProps, /*#__PURE__*/_react.default.createElement(_whiteSpace.default, {
    size: "xl"
  }), /*#__PURE__*/_react.default.createElement(_Button2.default, comProps), /*#__PURE__*/_react.default.createElement(_rcFieldForm.Field, tailLayout, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: function onClick() {
      return form.submit();
    }
  }, "Submit"))), /*#__PURE__*/_react.default.createElement(_whiteSpace.default, {
    size: "xl"
  }), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: function onClick() {
      return _umi.router.push('/normallist');
    }
  }, "\u4E0B\u4E00\u9875"));
};

var _default = Page;
exports.default = _default;