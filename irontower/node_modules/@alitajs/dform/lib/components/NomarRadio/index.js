"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("antd-mobile/es/list/style");

var _list = _interopRequireDefault(require("antd-mobile/es/list"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Field = _interopRequireDefault(require("../Field"));

var _radioGroup = _interopRequireDefault(require("./radioGroup"));

require("../../styles/index.less");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var NomarRadio = function NomarRadio(props) {
  var _useState = (0, _react.useState)(''),
      _useState2 = _slicedToArray(_useState, 2),
      initValue = _useState2[0],
      setInitValue = _useState2[1];

  var coverStyle = props.coverStyle,
      fieldProps = props.fieldProps,
      _props$required = props.required,
      required = _props$required === void 0 ? false : _props$required,
      rules = props.rules,
      title = props.title,
      _props$data = props.data,
      data = _props$data === void 0 ? [] : _props$data,
      _props$positionType = props.positionType,
      positionType = _props$positionType === void 0 ? 'horizontal' : _props$positionType,
      _props$hasStar = props.hasStar,
      hasStar = _props$hasStar === void 0 ? true : _props$hasStar,
      _props$radioType = props.radioType,
      radioType = _props$radioType === void 0 ? 'horizontal' : _props$radioType,
      subTitle = props.subTitle,
      onChange = props.onChange,
      _props$hidden = props.hidden,
      hidden = _props$hidden === void 0 ? false : _props$hidden;
  var isVertical = positionType === 'vertical';

  if (radioType === 'vertical') {
    isVertical = true;
  }

  var RadioGroup = function RadioGroup() {
    return /*#__PURE__*/_react.default.createElement(_Field.default, {
      name: fieldProps,
      rules: rules || [{
        required: required,
        message: "\u8BF7\u9009\u62E9".concat(title)
      }],
      shouldUpdate: function shouldUpdate(prevValue, nextValue) {
        setInitValue(nextValue && nextValue[fieldProps]);
        return prevValue !== nextValue;
      }
    }, /*#__PURE__*/_react.default.createElement(_radioGroup.default, {
      data: data,
      positionType: positionType,
      radioType: radioType,
      initValue: initValue,
      onChange: onChange,
      coverStyle: coverStyle
    }));
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !hidden && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, isVertical && /*#__PURE__*/_react.default.createElement("div", {
    className: "alitajs-dform-vertical-title"
  }, required && hasStar && /*#__PURE__*/_react.default.createElement("span", {
    className: "alitajs-dform-redStar"
  }, "*"), /*#__PURE__*/_react.default.createElement("span", {
    id: fieldProps,
    className: "alitajs-dform-title"
  }, title), subTitle), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)({
      'alitajs-dform-vertical-radio': isVertical,
      'alitajs-dform-radio': true
    })
  }, /*#__PURE__*/_react.default.createElement(_list.default.Item, {
    key: fieldProps,
    extra: RadioGroup()
  }, required && hasStar && /*#__PURE__*/_react.default.createElement("span", {
    className: "alitajs-dform-redStar"
  }, "*"), /*#__PURE__*/_react.default.createElement("span", {
    id: fieldProps,
    className: "alitajs-dform-title"
  }, title)))));
};

var _default = NomarRadio;
exports.default = _default;