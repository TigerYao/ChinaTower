"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _difference = _interopRequireDefault(require("lodash/difference"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var CheckBoxGroup = function CheckBoxGroup(props) {
  var data = props.data,
      onChange = props.onChange,
      _props$initValue = props.initValue,
      initValue = _props$initValue === void 0 ? [] : _props$initValue,
      coverStyle = props.coverStyle,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled;

  var _useState = (0, _react.useState)([]),
      _useState2 = _slicedToArray(_useState, 2),
      context = _useState2[0],
      setContext = _useState2[1];

  var _useState3 = (0, _react.useState)([]),
      _useState4 = _slicedToArray(_useState3, 2),
      preInitValue = _useState4[0],
      setPreInitValue = _useState4[1];

  (0, _react.useEffect)(function () {
    if (context.length === 0 || (0, _difference.default)(initValue, preInitValue).length !== 0) {
      var dataList = JSON.parse(JSON.stringify(data));
      setContext(_toConsumableArray(dataList).map(function (item) {
        var initItem = item;

        if (initValue.indexOf(initItem.value) !== -1) {
          initItem.flag = true;
        } else {
          initItem.flag = false;
        }

        return initItem;
      }));
      setPreInitValue(initValue);
    }
  }, [data, initValue]);

  var boxClick = function boxClick(e, dataItem) {
    e.stopPropagation();
    if (disabled) return;
    var values = [];
    var newData = context.map(function (item) {
      var selItem = item;
      if (item.value === dataItem.value) selItem.flag = !item.flag;
      if (selItem.flag) values.push(selItem.value);
      return selItem;
    });
    setContext(newData);
    if (onChange) onChange(values);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "alitajs-dform-box-content"
  }, _toConsumableArray(context).map(function (item) {
    return /*#__PURE__*/_react.default.createElement("div", {
      key: item.value,
      className: (0, _classnames.default)({
        'alitajs-dform-box-wrapper': true
      }),
      onClick: function onClick(e) {
        boxClick(e, item);
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'alitajs-dform-box-botton': true,
        'alitajs-dform-box-botton-checked': item.flag
      })
    }, item.flag && /*#__PURE__*/_react.default.createElement("div", {
      className: "alitajs-dform-box-tick"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "alitajs-dform-box-label",
      style: coverStyle
    }, item.label));
  }));
};

var _default = CheckBoxGroup;
exports.default = _default;