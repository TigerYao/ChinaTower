"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("antd-mobile/es/modal/style");

var _modal = _interopRequireDefault(require("antd-mobile/es/modal"));

require("antd-mobile/es/white-space/style");

var _whiteSpace = _interopRequireDefault(require("antd-mobile/es/white-space"));

require("antd-mobile/es/wing-blank/style");

var _wingBlank = _interopRequireDefault(require("antd-mobile/es/wing-blank"));

require("antd-mobile/es/button/style");

var _button = _interopRequireDefault(require("antd-mobile/es/button"));

require("antd-mobile/es/list/style");

var _list = _interopRequireDefault(require("antd-mobile/es/list"));

var _react = _interopRequireWildcard(require("react"));

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _rcFieldForm = _interopRequireDefault(require("rc-field-form"));

var _DynamicForm = require("../../DynamicForm");

var _EditForm = _interopRequireDefault(require("../EditForm/EditForm"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var radioList = [{
  label: '是',
  value: 'yes'
}, {
  label: '否',
  value: 'no'
}];
var seasons = [[{
  label: '2013',
  value: '2013'
}, {
  label: '2014',
  value: '2014'
}], [{
  label: '春',
  value: '春'
}, {
  label: '夏',
  value: '夏'
}]];
var seasonsUti = [[{
  label: '元',
  value: '元'
}, {
  label: '亿元',
  value: '亿元'
}]];
var InitFormData = [{
  type: 'input',
  fieldProps: 'username',
  required: true,
  placeholder: '请输入',
  title: '输入框',
  inputType: 'text',
  positionType: 'horizontal'
}, {
  type: 'select',
  fieldProps: 'userdata',
  required: true,
  placeholder: '请选择',
  title: '选择框',
  data: seasons,
  positionType: 'horizontal'
}, {
  type: 'area',
  fieldProps: 'usertextarea',
  required: true,
  positionType: 'vertical',
  placeholder: '请输入',
  title: '多行输入框'
}, {
  type: 'date',
  fieldProps: 'userDataPicker',
  required: true,
  placeholder: '请选择',
  title: '时间选择框',
  modeType: 'datetime',
  positionType: 'horizontal'
}, {
  type: 'switch',
  fieldProps: 'userswitch1',
  required: true,
  placeholder: '请选择',
  title: '开关',
  positionType: 'horizontal'
}, {
  type: 'radio',
  fieldProps: 'userRadio1',
  required: true,
  placeholder: '请选择',
  title: 'radio框',
  data: radioList,
  positionType: 'horizontal'
}, {
  type: 'extraInput',
  fieldProps: 'extraInput5',
  fieldProps2: 'extraInput6',
  required: true,
  placeholder: '请输入',
  placeholder2: '请选择',
  title: '多类型输入框',
  data: seasonsUti,
  extraType: 'select',
  positionType: 'vertical'
}, {
  type: 'rangeDatePicker',
  fieldProps: 'datePicker1',
  fieldProps2: 'datePicker2',
  required: true,
  placeholder: '请输入',
  placeholder2: '请选择',
  title: '时间区间选择框',
  modeType: 'datetime',
  positionType: 'vertical'
}, {
  type: 'coverRadio',
  fieldProps: 'cover',
  required: true,
  title: '覆盖式Radio框',
  data: radioList,
  positionType: 'horizontal'
}, {
  type: 'multiplePicker',
  fieldProps: 'multiplePicker',
  required: true,
  title: '多选弹窗列表框',
  data: radioList,
  positionType: 'horizontal'
}, {
  type: 'image',
  fieldProps: 'image',
  required: true,
  title: '图片上传'
}, {
  type: 'checkbox',
  fieldProps: 'box1',
  required: true,
  title: '多选框',
  data: radioList
}];
var InitFormValue = {
  username: '张三'
};

var NewFieldPicker = function NewFieldPicker(_ref) {
  var value = _ref.value;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      modal = _useState2[0],
      setModal = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      modal2 = _useState4[0],
      setModal2 = _useState4[1];

  var _useState5 = (0, _react.useState)(),
      _useState6 = _slicedToArray(_useState5, 2),
      selectFieldItem = _useState6[0],
      setSelectFieldItem = _useState6[1];

  var _useState7 = (0, _react.useState)(value || []),
      _useState8 = _slicedToArray(_useState7, 2),
      alitaDformExtraField = _useState8[0],
      setAlitaDformExtraField = _useState8[1];

  var onSelectFieldItem = function onSelectFieldItem(formItem) {
    alitaDformExtraField.push(_objectSpread({}, formItem));
    setAlitaDformExtraField(alitaDformExtraField); // onChange && onChange(alitaDformExtraField);

    setModal2(false);
  };

  var onFinish = function onFinish(values) {
    // eslint-disable-next-line no-console
    console.log('Success:', values);
  };

  var onFinishFailed = function onFinishFailed(errorInfo) {
    // eslint-disable-next-line no-console
    console.log('Failed:', errorInfo);
  };

  var defaultFailed = function defaultFailed(errorInfo) {
    if (!errorInfo || !errorInfo.errorFields || errorInfo.errorFields.length === 0 || onFinishFailed) {
      onFinishFailed(errorInfo);
      return;
    }

    var scrollToField = function scrollToField(fieldKey) {
      var labelNode = document.getElementById("aliat-dform-".concat(fieldKey));

      if (labelNode) {
        labelNode.scrollIntoView(true);
      }
    };

    scrollToField(errorInfo.errorFields[0].name[0]);

    if (onFinishFailed) {
      onFinishFailed(errorInfo);
    }
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_rcFieldForm.default, null, /*#__PURE__*/_react.default.createElement(_list.default, {
    renderHeader: function renderHeader() {
      return /*#__PURE__*/_react.default.createElement("div", {
        style: {
          textAlign: 'center',
          display: alitaDformExtraField.length > 0 ? 'block' : 'none'
        }
      }, "\u4EE5\u4E0B\u8868\u5355\u4E3A\u7F16\u8F91\u751F\u6210\uFF0C\u8BF7\u624B\u52A8\u4FDD\u5B58\u5230\u4EE3\u7801\u4E2D");
    }
  }, alitaDformExtraField.map(function (item) {
    return (0, _DynamicForm.getFormItem)(item, false);
  }))), /*#__PURE__*/_react.default.createElement(_wingBlank.default, {
    size: "lg"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    inline: true,
    type: "primary",
    onClick: function onClick() {
      return setModal(true);
    },
    style: {
      width: '50%'
    }
  }, "\u65B0\u589E\u8868\u5355"), /*#__PURE__*/_react.default.createElement(_button.default, {
    inline: true,
    type: "primary",
    onClick: function onClick() {
      return (0, _copyToClipboard.default)(JSON.stringify(alitaDformExtraField));
    },
    style: {
      width: '50%'
    }
  }, "\u62F7\u8D1D\u914D\u7F6E")), /*#__PURE__*/_react.default.createElement(_whiteSpace.default, null), /*#__PURE__*/_react.default.createElement(_modal.default, {
    popup: true,
    visible: modal,
    onClose: function onClose() {
      return setModal(false);
    },
    animationType: "slide-up",
    style: {
      height: '12rem'
    }
  }, /*#__PURE__*/_react.default.createElement(_rcFieldForm.default, {
    initialValues: InitFormValue,
    onFinish: onFinish,
    onFinishFailed: function onFinishFailed(errorInfo) {
      return defaultFailed(errorInfo);
    }
  }, /*#__PURE__*/_react.default.createElement(_list.default, {
    renderHeader: function renderHeader() {
      return /*#__PURE__*/_react.default.createElement("div", {
        style: {
          textAlign: 'center'
        }
      }, "\u9009\u62E9\u8868\u5355\u7C7B\u578B");
    },
    style: {
      textAlign: 'left'
    }
  }, InitFormData.map(function (item) {
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        position: 'relative'
      },
      key: item.fieldProps
    }, (0, _DynamicForm.getFormItem)(item, false), /*#__PURE__*/_react.default.createElement("div", {
      style: {
        width: '100%',
        // height: '1.32rem',
        height: '100%',
        position: 'absolute',
        top: '0',
        left: '0',
        zIndex: 99
      },
      onClick: function onClick(e) {
        e.stopPropagation();
        setSelectFieldItem(_objectSpread({}, item));
        setModal(false);
        setModal2(true);
      }
    }));
  }), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: function onClick() {
      return setModal(false);
    }
  }, "\u53D6\u6D88")))), /*#__PURE__*/_react.default.createElement(_modal.default, {
    popup: true,
    visible: modal2,
    onClose: function onClose() {
      return setModal2(false);
    },
    animationType: "slide-up"
  }, /*#__PURE__*/_react.default.createElement(_list.default, {
    renderHeader: function renderHeader() {
      return /*#__PURE__*/_react.default.createElement("div", {
        style: {
          textAlign: 'center'
        }
      }, "\u7F16\u8F91\u8868\u5355\u6570\u636E");
    }
  }, /*#__PURE__*/_react.default.createElement(_EditForm.default, {
    data: selectFieldItem,
    onChange: onSelectFieldItem
  }))));
};

var _default = NewFieldPicker;
exports.default = _default;