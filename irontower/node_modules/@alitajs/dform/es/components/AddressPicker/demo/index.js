import "antd-mobile/es/button/style";
import _Button from "antd-mobile/es/button";
import "antd-mobile/es/white-space/style";
import _WhiteSpace from "antd-mobile/es/white-space";
import "antd-mobile/es/toast/style";
import _Toast from "antd-mobile/es/toast";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * title: 基础 选址
 * desc: 表单使用 demo
 */
import React, { useState } from 'react';
import DynamicForm, { useForm } from '@alitajs/dform';
import countryList from '../../../utils/country.json';
var streetData = [{
  label: '街道1',
  value: '1111'
}, {
  label: '街道2',
  value: '1112'
}, {
  label: '街道3',
  value: '1113'
}, {
  label: '街道4',
  value: '1114'
}, {
  label: '街道5',
  value: '1115'
}, {
  label: '街道6',
  value: '1116'
}];

var Page = function Page() {
  var _useForm = useForm(),
      _useForm2 = _slicedToArray(_useForm, 1),
      form = _useForm2[0];

  var onFinish = function onFinish(values) {
    // eslint-disable-next-line no-console
    console.log('Success:', values);
  };

  var onFinishFailed = function onFinishFailed(errorInfo) {
    // eslint-disable-next-line no-console
    console.log('Failed:', errorInfo);
  };

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      homeAddrData = _useState2[0],
      setHomeAddrData = _useState2[1];

  var _useState3 = useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      workAddrData = _useState4[0],
      setWorkAddrData = _useState4[1];

  var resetHomeAddrList = function resetHomeAddrList(values) {
    var data = [];

    switch (values.length) {
      case 0:
        data = Object.keys(countryList).map(function (val) {
          return {
            label: countryList[val].name,
            value: val
          };
        });
        break;

      case 1:
        data = Object.keys(countryList[values[0]].child).map(function (val) {
          return {
            label: countryList[values[0]].child[val].name,
            value: val
          };
        });
        break;

      case 2:
        // eslint-disable-next-line no-case-declarations
        var cityData1 = countryList[values[0]].child;
        data = Object.keys(cityData1[values[1]].child).map(function (val) {
          return {
            label: cityData1[values[1]].child[val],
            value: val
          };
        });
        break;

      case 3:
        // eslint-disable-next-line no-case-declarations
        var cityData2 = countryList[values[0]].child;
        data = Object.keys(cityData2[values[1]].child).map(function (val) {
          return {
            label: cityData2[values[1]].child[val],
            value: val
          };
        });
        break;

      default:
        break;
    }

    setHomeAddrData(data);

    _Toast.hide();
  };

  var resetWorkAddrList = function resetWorkAddrList(values) {
    var data = [];

    switch (values.length) {
      case 0:
        data = Object.keys(countryList).map(function (val) {
          return {
            label: countryList[val].name,
            value: val
          };
        });
        break;

      case 1:
        data = Object.keys(countryList[values[0]].child).map(function (val) {
          return {
            label: countryList[values[0]].child[val].name,
            value: val
          };
        });
        break;

      case 2:
        // eslint-disable-next-line no-case-declarations
        var cityData1 = countryList[values[0]].child;
        data = Object.keys(cityData1[values[1]].child).map(function (val) {
          return {
            label: cityData1[values[1]].child[val],
            value: val
          };
        });
        break;

      case 3:
        data = streetData;
        break;

      case 4:
        data = streetData;
        break;

      default:
        break;
    }

    setWorkAddrData(data);

    _Toast.hide();
  };

  var formsData = [{
    type: 'addressPicker',
    fieldProps: 'homeAddr',
    required: true,
    title: '居住地址',
    placeholder: '选择当前居住城市',
    level: 3,
    data: homeAddrData,
    placeholderList: ['请选择省', '请选择市', '请选择区'],
    onChangeLevel: function onChangeLevel(values) {
      // eslint-disable-next-line no-console
      console.log(values);

      _Toast.loading('加载中', 1);

      setTimeout(function () {
        resetHomeAddrList(values);
      }, 500);
    },
    onClick: function onClick() {
      console.log(123);
    }
  }, {
    type: 'addressPicker',
    fieldProps: 'workAddr',
    title: '工作地址',
    // disabled: true,
    placeholder: '请选择',
    positionType: 'vertical',
    level: 4,
    data: workAddrData,
    placeholderList: ['请选择省', '请选择市', '请选择区', '请选择街道'],
    onChangeLevel: function onChangeLevel(values) {
      // eslint-disable-next-line no-console
      resetWorkAddrList(values);
    }
  }];
  var formsValues = {
    homeAddr: {
      value: ['350000', '350100', '350102'],
      label: ['福建省', '福州市', '鼓楼区']
    }
  };
  var formProps = {
    onFinish: onFinish,
    onFinishFailed: onFinishFailed,
    data: formsData,
    formsValues: formsValues,
    form: form,
    autoLineFeed: false,
    isDev: true
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DynamicForm, formProps), /*#__PURE__*/React.createElement(_WhiteSpace, {
    size: "sm"
  }), /*#__PURE__*/React.createElement(_Button, {
    type: "primary",
    onClick: function onClick() {
      return form.submit();
    }
  }, "Submit"));
};

export default Page;