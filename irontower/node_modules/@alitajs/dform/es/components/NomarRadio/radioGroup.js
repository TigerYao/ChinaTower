function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState, useEffect } from 'react';
import classnames from 'classnames';
import '../../styles/index.less';

var RadioGroup = function RadioGroup(props) {
  var data = props.data,
      onChange = props.onChange,
      _props$positionType = props.positionType,
      positionType = _props$positionType === void 0 ? 'horizontal' : _props$positionType,
      _props$radioType = props.radioType,
      radioType = _props$radioType === void 0 ? 'horizontal' : _props$radioType,
      initValue = props.initValue,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      coverStyle = props.coverStyle;

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      context = _useState2[0],
      setContext = _useState2[1];

  var isVertical = positionType === 'vertical';

  if (radioType === 'vertical') {
    isVertical = true;
  }

  useEffect(function () {
    var dataList = JSON.parse(JSON.stringify(data));
    setContext(_toConsumableArray(dataList).map(function (item) {
      var initItem = item;

      if (initItem.value === initValue) {
        initItem.flag = true;
      } else {
        initItem.flag = false;
      }

      initItem.moveFlag = false;
      return initItem;
    }));
  }, [data, initValue]);

  var radioClick = function radioClick(e, dataItem) {
    e.stopPropagation();
    if (disabled) return;
    if (onChange) onChange("".concat(dataItem.value));
    setContext(context.map(function (item) {
      var selItem = item;

      if (item.value === dataItem.value) {
        selItem.flag = true;
      } else {
        selItem.flag = false;
      }

      return selItem;
    }));
  };

  return /*#__PURE__*/React.createElement("div", {
    className: classnames({
      'alitajs-dform-radio-group': true,
      'alitajs-dform-radio-position': !isVertical,
      'alitajs-dform-radio-item-vertical': radioType === 'vertical'
    })
  }, context.map(function (item) {
    return /*#__PURE__*/React.createElement("div", {
      key: item.value,
      className: classnames({
        'alitajs-dform-radio-wrapper': true,
        'alitajs-dform-radio-wrapper-item-vertical': radioType === 'vertical'
      }),
      onClick: function onClick(e) {
        radioClick(e, item);
      }
    }, /*#__PURE__*/React.createElement("div", {
      className: classnames({
        'alitajs-dform-radio-button': true,
        'alitajs-dform-radio-checked': item.flag
      })
    }, item.flag && /*#__PURE__*/React.createElement("div", {
      className: "alitajs-dform-radio-inner-button"
    })), /*#__PURE__*/React.createElement("div", {
      className: "alitajs-dform-radio-label",
      style: coverStyle
    }, item.label));
  }));
};

export default RadioGroup;