import "antd-mobile/es/input-item/style";
import _InputItem from "antd-mobile/es/input-item";
import "antd-mobile/es/picker/style";
import _Picker from "antd-mobile/es/picker";
import "antd-mobile/es/list/style";
import _List from "antd-mobile/es/list";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import classnames from 'classnames';
import Field from '../Field';
import { NomarInput } from '..';
import '../../styles/index.less';

var ExtraInput = function ExtraInput(props) {
  var _props$inputType = props.inputType,
      inputType = _props$inputType === void 0 ? 'text' : _props$inputType,
      fieldProps = props.fieldProps,
      fieldProps2 = props.fieldProps2,
      title = props.title,
      required = props.required,
      rules = props.rules,
      coverStyle = props.coverStyle,
      placeholder2 = props.placeholder2,
      _props$extraType = props.extraType,
      extraType = _props$extraType === void 0 ? 'input' : _props$extraType,
      _props$positionType = props.positionType,
      positionType = _props$positionType === void 0 ? 'vertical' : _props$positionType,
      _props$hasStar = props.hasStar,
      hasStar = _props$hasStar === void 0 ? true : _props$hasStar,
      data = props.data,
      firstProps = props.firstProps,
      secondProps = props.secondProps,
      subTitle = props.subTitle,
      _props$hidden = props.hidden,
      hidden = _props$hidden === void 0 ? false : _props$hidden,
      otherProps = _objectWithoutProperties(props, ["inputType", "fieldProps", "fieldProps2", "title", "required", "rules", "coverStyle", "placeholder2", "extraType", "positionType", "hasStar", "data", "firstProps", "secondProps", "subTitle", "hidden"]);

  var isVertical = positionType === 'vertical';

  var extraDiv = function extraDiv() {
    if (extraType === 'select') {
      return /*#__PURE__*/React.createElement(Field, {
        name: fieldProps2,
        rules: rules || [{
          required: required,
          message: "\u8BF7\u8F93\u5165".concat(title)
        }]
      }, /*#__PURE__*/React.createElement(_Picker, _extends({}, secondProps, {
        style: coverStyle,
        title: title,
        data: data,
        cascade: false,
        extra: placeholder2
      }), /*#__PURE__*/React.createElement(_List.Item, {
        arrow: "horizontal"
      })));
    }

    return /*#__PURE__*/React.createElement(Field, {
      name: fieldProps2,
      rules: rules || [{
        required: required,
        message: "\u8BF7\u8F93\u5165".concat(title)
      }]
    }, /*#__PURE__*/React.createElement(_InputItem, _extends({}, otherProps, secondProps, {
      type: inputType,
      style: _objectSpread({
        textAlign: 'right'
      }, coverStyle),
      placeholder: placeholder2
    })));
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, !hidden && /*#__PURE__*/React.createElement(React.Fragment, null, isVertical && /*#__PURE__*/React.createElement("div", {
    className: "alitajs-dform-vertical-title"
  }, required && hasStar && /*#__PURE__*/React.createElement("span", {
    className: "alitajs-dform-redStar"
  }, "*"), /*#__PURE__*/React.createElement("span", {
    id: fieldProps,
    className: "alitajs-dform-title"
  }, title), subTitle), /*#__PURE__*/React.createElement("div", {
    className: classnames({
      'alitajs-dform-extra-input': true,
      'alitajs-dform-extra-horizontal': !isVertical
    })
  }, /*#__PURE__*/React.createElement("div", {
    className: "alitajs-dform-begin".concat(isVertical ? '-vertical' : '', "-input")
  }, /*#__PURE__*/React.createElement(NomarInput, _extends({}, otherProps, firstProps, {
    required: required,
    rules: rules,
    coverStyle: _objectSpread({
      textAlign: 'left'
    }, coverStyle),
    fieldProps: fieldProps,
    title: title,
    extra: ""
  }))), extraType === 'input' && /*#__PURE__*/React.createElement("div", {
    className: "alitajs-dform-line"
  }, "~"), /*#__PURE__*/React.createElement("div", {
    className: "alitajs-dform-end".concat(isVertical ? '-vertical' : '', "-input"),
    style: {
      width: isVertical ? '' : ''
    }
  }, extraDiv()))));
};

export default ExtraInput;