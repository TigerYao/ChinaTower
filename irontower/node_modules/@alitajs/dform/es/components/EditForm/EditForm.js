import "antd-mobile/es/button/style";
import _Button from "antd-mobile/es/button";
import "antd-mobile/es/white-space/style";
import _WhiteSpace from "antd-mobile/es/white-space";
import "antd-mobile/es/list/style";
import _List from "antd-mobile/es/list";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable no-param-reassign */
import React, { useState } from 'react';
import Form, { Field, useForm } from 'rc-field-form';
import { NomarInput, NomarPicker, NomarSwitch, NomarTextArea, NomarDatePicker, ExtraInput, RangeDatePicker, NomarRadio, CoverRadio, MultiplePicker, NomarImagePicker, NomarCheckBox } from '..';
var FormItemType = {
  input: NomarInput,
  select: NomarPicker,
  area: NomarTextArea,
  date: NomarDatePicker,
  switch: NomarSwitch,
  radio: NomarRadio,
  extraInput: ExtraInput,
  rangeDatePicker: RangeDatePicker,
  coverRadio: CoverRadio,
  multiplePicker: MultiplePicker,
  image: NomarImagePicker,
  checkbox: NomarCheckBox
};
var radioList = [{
  label: '是',
  value: 'yes'
}, {
  label: '否',
  value: 'no'
}];
var EditFormItemLabel = {
  title: '标题',
  fieldProps: '绑定关键字',
  required: '是否必填',
  placeholder: '输入提示',
  disabled: '是否可编辑',
  data: '表单数据',
  inputType: '输入框类型',
  modeType: '选择器类型',
  fieldProps2: '副绑定关键字',
  placeholder2: '副输入提示',
  extraType: '扩展类型',
  type: '类型',
  positionType: '位置'
}; // inputType:'text' | 'bankCard' | 'phone' | 'password' | 'number' | 'digit' | 'money';
// modeType:mode?: 'datetime' | 'date' | 'year' | 'month' | 'time';

var EditFormItemType = {
  title: NomarInput,
  fieldProps: NomarInput,
  required: NomarSwitch,
  placeholder: NomarInput,
  disabled: NomarRadio,
  data: NomarInput,
  type: NomarInput,
  positionType: function positionType(props) {
    return /*#__PURE__*/React.createElement(NomarPicker, _extends({
      data: [['horizontal', 'vertical'].map(function (item) {
        return {
          value: item,
          label: item
        };
      })],
      cols: 1
    }, props));
  },
  inputType: function inputType(props) {
    return /*#__PURE__*/React.createElement(NomarPicker, _extends({
      data: [['text', 'bankCard', 'phone', 'password', 'number', 'digit', 'money'].map(function (item) {
        return {
          value: item,
          label: item
        };
      })],
      cols: 1
    }, props));
  },
  modeType: function modeType(props) {
    return /*#__PURE__*/React.createElement(NomarPicker, _extends({
      data: [['datetime', 'date', 'year', 'month', 'time'].map(function (item) {
        return {
          value: item,
          label: item
        };
      })],
      cols: 1
    }, props));
  },
  fieldProps2: NomarInput,
  placeholder2: NomarInput,
  extraType: function extraType(props) {
    return /*#__PURE__*/React.createElement(NomarPicker, _extends({
      data: [['input', 'select'].map(function (item) {
        return {
          value: item,
          label: item
        };
      })],
      cols: 1
    }, props));
  }
};

var getFormItem = function getFormItem(fieldItemKey) {
  var EditFormItemComponent = EditFormItemType[fieldItemKey];
  var title = EditFormItemLabel[fieldItemKey];
  return /*#__PURE__*/React.createElement(EditFormItemComponent, {
    key: "alita-dform-edit-".concat(fieldItemKey),
    fieldProps: fieldItemKey,
    title: title,
    editable: fieldItemKey !== 'type'
  });
};

var getShowDeitItem = function getShowDeitItem(editData) {
  if (!editData) return;
  var _ref = editData,
      inputType = _ref.inputType,
      modeType = _ref.modeType,
      extraType = _ref.extraType,
      positionType = _ref.positionType;

  var _ref2 = editData,
      type = _ref2.type,
      otherProps = _objectWithoutProperties(_ref2, ["type"]); // 选择类型的初始值要手动转化一下 2/3


  if (inputType) {
    inputType = inputType[0];
    otherProps.inputType = inputType;
  }

  if (modeType) {
    modeType = modeType[0];
    otherProps.modeType = modeType;
  }

  if (extraType) {
    extraType = extraType[0];
    otherProps.extraType = extraType;
  }

  if (positionType) {
    // eslint-disable-next-line prefer-destructuring
    positionType = positionType[0];
    otherProps.positionType = positionType;
  }

  var ShowItemComponent = FormItemType[type]; // eslint-disable-next-line consistent-return

  return /*#__PURE__*/React.createElement(ShowItemComponent, otherProps);
};

export var defaultFailed = function defaultFailed(errorInfo, onFinishFailed) {
  if (!errorInfo || !errorInfo.errorFields || errorInfo.errorFields.length === 0) {
    if (onFinishFailed) {
      onFinishFailed(errorInfo);
    }

    return;
  }

  var scrollToField = function scrollToField(fieldKey) {
    var labelNode = document.getElementById("aliat-dform-".concat(fieldKey));

    if (labelNode) {
      labelNode.scrollIntoView(true);
    }
  };

  scrollToField(errorInfo.errorFields[0].name[0]);
  if (onFinishFailed) onFinishFailed(errorInfo);
};

var EditForm = function EditForm(_ref3) {
  var _ref3$data = _ref3.data,
      data = _ref3$data === void 0 ? [] : _ref3$data,
      onChange = _ref3.onChange;

  var _useForm = useForm(),
      _useForm2 = _slicedToArray(_useForm, 1),
      form = _useForm2[0]; // 选择类型的初始值要手动转化一下 1/3


  if (data.fieldProps) {
    // 加了随机数
    data.fieldProps = "".concat(Math.random().toString(36).slice(2, 6)).concat(data.fieldProps);
  }

  if (data.fieldProps2) {
    // 加了随机数
    data.fieldProps2 = "".concat(Math.random().toString(36).slice(2, 6)).concat(data.fieldProps2);
  }

  if (data.inputType) {
    data.inputType = [data.inputType];
  }

  if (data.modeType) {
    data.modeType = [data.modeType];
  }

  if (data.extraType) {
    data.extraType = [data.extraType];
  }

  if (data.positionType) {
    data.positionType = [data.positionType];
  }

  var _useState = useState(_objectSpread({}, data)),
      _useState2 = _slicedToArray(_useState, 2),
      editData = _useState2[0],
      setEditData = _useState2[1];

  var onFinish = function onFinish(values) {
    // eslint-disable-next-line no-console
    console.log('Success:', values); // 选择类型的初始值要手动转化一下 3/3

    var newFormItem = _objectSpread({}, values);

    var inputType = newFormItem.inputType,
        modeType = newFormItem.modeType,
        extraType = newFormItem.extraType,
        type = newFormItem.type,
        positionType = newFormItem.positionType;

    if (inputType && typeof inputType !== 'string') {
      newFormItem.inputType = inputType[0];
    }

    if (modeType && typeof modeType !== 'string') {
      newFormItem.modeType = modeType[0];
    }

    if (extraType && typeof extraType !== 'string') {
      newFormItem.extraType = extraType[0];
    }

    if (positionType && typeof positionType !== 'string') {
      newFormItem.positionType = positionType[0];
    }

    if (type === 'radio' || type === 'coverRadio' || type === 'checkbox' || type === 'multiplePicker') {
      newFormItem.data = radioList;
    }

    if (type === 'select' || type === 'extraInput') {
      newFormItem.data = [radioList];
    } // newFormItem.type = 'input';


    if (onChange) onChange(newFormItem);
  };

  var _onFinishFailed = function onFinishFailed(errorInfo) {
    // eslint-disable-next-line no-console
    console.log('Failed:', errorInfo);
  };

  return /*#__PURE__*/React.createElement("div", {
    style: {
      textAlign: 'left'
    }
  }, /*#__PURE__*/React.createElement(Form, null, /*#__PURE__*/React.createElement(_List, {
    renderHeader: function renderHeader() {
      return '效果演示';
    }
  }, getShowDeitItem(editData))), /*#__PURE__*/React.createElement(Form, {
    form: form,
    initialValues: _objectSpread({}, editData),
    onFinish: onFinish,
    onFinishFailed: function onFinishFailed(errorInfo) {
      return defaultFailed(errorInfo, _onFinishFailed);
    },
    onValuesChange: function onValuesChange(changFeil) {
      var newData = _objectSpread({}, editData, {}, changFeil);

      setEditData(newData);
    }
  }, /*#__PURE__*/React.createElement(_List, {
    renderHeader: function renderHeader() {
      return '编辑数据';
    }
  }, Object.keys(data || {}).filter(function (i) {
    return i !== 'data';
  }) // .filter(i => i !== 'type' && i !== 'data')
  .map(function (fieldItemKey) {
    return getFormItem(fieldItemKey);
  })), /*#__PURE__*/React.createElement(_WhiteSpace, {
    size: "lg"
  }), /*#__PURE__*/React.createElement(Field, null, /*#__PURE__*/React.createElement(_Button, {
    type: "primary",
    onClick: function onClick() {
      return form.submit();
    }
  }, "\u5B8C\u6210"))));
};

export default EditForm;