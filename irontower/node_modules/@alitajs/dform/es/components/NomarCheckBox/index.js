function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState } from 'react';
import Field from '../Field';
import CheckBoxGroup from './checkBoxgroup';
import '../../styles/index.less';

var NomarCheckBox = function NomarCheckBox(props) {
  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      initValue = _useState2[0],
      setInitValue = _useState2[1];

  var coverStyle = props.coverStyle,
      fieldProps = props.fieldProps,
      title = props.title,
      rules = props.rules,
      _props$required = props.required,
      required = _props$required === void 0 ? false : _props$required,
      _props$data = props.data,
      data = _props$data === void 0 ? [] : _props$data,
      _props$hasStar = props.hasStar,
      hasStar = _props$hasStar === void 0 ? true : _props$hasStar,
      subTitle = props.subTitle,
      onChange = props.onChange,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$hidden = props.hidden,
      hidden = _props$hidden === void 0 ? false : _props$hidden;
  return /*#__PURE__*/React.createElement(React.Fragment, null, !hidden && /*#__PURE__*/React.createElement("div", {
    className: "alitajs-dform-check-box"
  }, /*#__PURE__*/React.createElement("div", {
    className: "alitajs-dform-vertical-title"
  }, required && hasStar && /*#__PURE__*/React.createElement("span", {
    className: "alitajs-dform-redStar"
  }, "*"), /*#__PURE__*/React.createElement("span", {
    id: fieldProps,
    className: "alitajs-dform-title"
  }, title), subTitle), /*#__PURE__*/React.createElement(Field, {
    name: fieldProps,
    rules: rules || [{
      required: required,
      message: "\u8BF7\u9009\u62E9".concat(title)
    }],
    shouldUpdate: function shouldUpdate(prevValue, nextValue) {
      setInitValue(nextValue && nextValue[fieldProps]);
      return prevValue !== nextValue;
    }
  }, /*#__PURE__*/React.createElement(CheckBoxGroup, {
    data: data,
    onChange: onChange,
    coverStyle: coverStyle,
    initValue: initValue,
    disabled: disabled
  }))));
};

export default NomarCheckBox;