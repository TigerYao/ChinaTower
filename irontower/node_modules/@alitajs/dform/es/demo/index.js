import "antd-mobile/es/button/style";
import _Button from "antd-mobile/es/button";
import "antd-mobile/es/white-space/style";
import _WhiteSpace from "antd-mobile/es/white-space";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React from 'react';
import DynamicForm, { useForm } from '@alitajs/dform';
var seasons = [[{
  label: '2013',
  value: '2013'
}, {
  label: '2014',
  value: '2014'
}], [{
  label: '春',
  value: '春'
}, {
  label: '夏',
  value: '夏'
}]];
var radioList = [{
  label: '是',
  value: 'yes'
}, {
  label: '否',
  value: 'no'
}];
var sexList = [{
  label: '男',
  value: 'man'
}, {
  label: '女',
  value: 'woman'
}];
var foodList = [{
  label: '宫保鸡丁',
  value: '宫保鸡丁'
}, {
  label: '可乐鸡翅',
  value: '可乐鸡翅'
}, {
  label: '爆炒虾仁',
  value: '爆炒虾仁'
}, {
  label: '清蒸小黄鱼',
  value: '清蒸小黄鱼'
}, {
  label: '红烧肉',
  value: '红烧肉'
}];

var Page = function Page() {
  var _useForm = useForm(),
      _useForm2 = _slicedToArray(_useForm, 1),
      form = _useForm2[0];

  var onFinish = function onFinish(values) {
    // eslint-disable-next-line no-console
    console.log('Success:', values);
  };

  var onFinishFailed = function onFinishFailed(errorInfo) {
    // eslint-disable-next-line no-console
    console.log('Failed:', errorInfo);
  };

  var formsData = [{
    type: 'input',
    fieldProps: 'username',
    required: true,
    placeholder: '请输入',
    title: '用户名',
    inputType: 'text'
  }, {
    type: 'select',
    fieldProps: 'userdata',
    required: true,
    placeholder: '请选择',
    title: '用户数据',
    data: seasons
  }, {
    type: 'multiplePicker',
    fieldProps: 'userFood',
    data: foodList,
    title: '选择喜欢的食物(多选)',
    placeholder: '请选择'
  }, {
    type: 'switch',
    fieldProps: 'userswitch',
    required: true,
    placeholder: '请选择',
    title: '用户选择'
  }, {
    type: 'area',
    fieldProps: 'usertextarea',
    placeholder: '多行输入',
    title: '备注',
    positionType: 'horizontal',
    coverStyle: {
      border: '1px solid #108ee9',
      background: '#fff'
    }
  }, {
    type: 'date',
    fieldProps: 'userDataPicker',
    required: true,
    placeholder: '请选择',
    title: '用户时间选择',
    modeType: 'datetime'
  }, {
    type: 'extraInput',
    fieldProps: 'minPrice',
    fieldProps2: 'maxPrice',
    placeholder: '请输入1',
    placeholder2: '请输入',
    title: '价格区间',
    required: true
  }, {
    type: 'radio',
    fieldProps: 'userRadio',
    required: true,
    title: '发票',
    data: radioList
  }, {
    type: 'coverRadio',
    title: '性别',
    data: sexList,
    fieldProps: 'userSex'
  }, {
    type: 'rangeDatePicker',
    fieldProps: 'datePicker3',
    fieldProps2: 'datePicker4',
    required: true,
    title: '时间区间',
    modeType: 'month'
  }, {
    type: 'input',
    fieldProps: 'custPhone',
    placeholder: '标题超过16字符自动开启，如需关闭，请设置 autoLineFeed',
    title: '超长标题(自动开启双行模式)',
    inputType: 'text',
    positionType: 'vertical',
    editable: false
  }, {
    type: 'select',
    fieldProps: 'timeAndWeather',
    placeholder: '请选择',
    title: '选择当前时间和天气',
    data: seasons
  }, {
    type: 'area',
    fieldProps: 'busInfo',
    placeholder: '多行输入',
    title: '集团基本信息',
    positionType: 'vertical'
  }, {
    type: 'date',
    fieldProps: 'beginDate',
    placeholder: '请选择',
    title: '选择出发时间',
    modeType: 'datetime',
    positionType: 'vertical'
  }, {
    type: 'extraInput',
    fieldProps: 'minLength',
    fieldProps2: 'maxLength',
    placeholder: '请输入',
    placeholder2: '请输入',
    title: '长度区间',
    positionType: 'vertical'
  }, {
    type: 'radio',
    fieldProps: 'userRadio2',
    title: '发票',
    data: radioList,
    positionType: 'vertical'
  }, {
    type: 'coverRadio',
    title: '性别',
    data: sexList,
    positionType: 'vertical',
    fieldProps: 'userSex2'
  }, {
    type: 'rangeDatePicker',
    fieldProps: 'datePicker5',
    fieldProps2: 'datePicker6',
    title: '时间区间',
    modeType: 'month',
    positionType: 'vertical'
  }];
  var formsValues = {
    useronlyread: '原始文档，没有变更',
    userSex: 'man',
    userSex2: 'woman',
    userFood: ['爆炒虾仁', '红烧肉']
  };
  var formProps = {
    onFinish: onFinish,
    onFinishFailed: onFinishFailed,
    data: formsData,
    formsValues: formsValues,
    form: form,
    isDev: true // allDisabled: true,

  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DynamicForm, formProps), /*#__PURE__*/React.createElement(_WhiteSpace, {
    size: "sm"
  }), /*#__PURE__*/React.createElement(_Button, {
    type: "primary",
    onClick: function onClick() {
      return form.submit();
    }
  }, "Submit"));
};

export default Page;