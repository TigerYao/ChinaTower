import "antd-mobile/es/wing-blank/style";
import _WingBlank from "antd-mobile/es/wing-blank";
import "antd-mobile/es/list/style";
import _List from "antd-mobile/es/list";
import "antd-mobile/es/card/style";
import _Card from "antd-mobile/es/card";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable no-param-reassign */
import React, { useEffect } from 'react';
import Form from 'rc-field-form';
import { getByteLen } from './utils';
import { NomarInput, NomarPicker, NomarSwitch, NomarTextArea, NomarDatePicker, ExtraInput, RangeDatePicker, NomarRadio, NomarCheckBox, CoverRadio, NomarImagePicker, NomarCustom, MultiplePicker, AddressPicker } from './components';
import NewFieldPicker from './components/NewFieldPicker/NewFieldPicker';
var FormItemType = {
  input: NomarInput,
  select: NomarPicker,
  area: NomarTextArea,
  date: NomarDatePicker,
  switch: NomarSwitch,
  radio: NomarRadio,
  extraInput: ExtraInput,
  rangeDatePicker: RangeDatePicker,
  checkbox: NomarCheckBox,
  coverRadio: CoverRadio,
  image: NomarImagePicker,
  custom: NomarCustom,
  multiplePicker: MultiplePicker,
  addressPicker: AddressPicker
};
var nodeEnvIsDev = process.env.NODE_ENV === 'development';
export var getFormItem = function getFormItem(formItem, allDisabled) {
  var type = formItem.type,
      _formItem$disabled = formItem.disabled,
      disabled = _formItem$disabled === void 0 ? allDisabled : _formItem$disabled,
      otherProps = _objectWithoutProperties(formItem, ["type", "disabled"]);

  var FormItemComponent = FormItemType[formItem.type];
  return /*#__PURE__*/React.createElement(FormItemComponent, _extends({}, otherProps, {
    key: formItem.fieldProps,
    disabled: disabled
  }));
};
export var defaultFailed = function defaultFailed(errorInfo, onFinishFailed) {
  if (!errorInfo || !errorInfo.errorFields || errorInfo.errorFields.length === 0) {
    if (onFinishFailed) onFinishFailed(errorInfo);
    return;
  }

  var scrollToField = function scrollToField(fieldKey) {
    var labelNode = document.getElementById("aliat-dform-".concat(fieldKey));

    if (labelNode) {
      labelNode.scrollIntoView(true);
    }
  };

  scrollToField(errorInfo.errorFields[0].name[0]);
  if (onFinishFailed) onFinishFailed(errorInfo);
};
/**
 * 根据传进来的数据判断 DForm 的类型
 * @param data
 */

export var getDFormType = function getDFormType(data) {
  if (data instanceof Array) {
    var isTwoDimensional = false;
    var isCardListType = false;
    data.forEach(function (item) {
      if (item instanceof Array) {
        isTwoDimensional = true;
      } else {
        isCardListType = !item.fieldProps;
      }
    });

    if (isTwoDimensional) {
      return 'NORMALLIST';
    }

    return isCardListType ? 'CARDLIST' : 'NORMAL';
  }

  return 'CARD';
};

var changeData = function changeData(oldData, autoLineFeed) {
  return oldData.map(function (item) {
    if (item.positionType === 'vertical' || !autoLineFeed) return item;

    if (item.title) {
      var titleSize = getByteLen(item.title);

      if (titleSize >= 16) {
        item.positionType = 'vertical';
      } else if (item.type === 'input' || item.type === 'extraInput') {
        if (titleSize > 8) {
          item.labelNumber = titleSize / 2 + 1;
        } else {
          item.labelNumber = 5;
        }
      }
    }

    return item;
  });
};

var renderCardMain = function renderCardMain(formData, allDisabled, autoLineFeed) {
  var _ref = formData,
      data = _ref.data,
      otherData = _objectWithoutProperties(_ref, ["data"]);

  return /*#__PURE__*/React.createElement(_WingBlank, {
    size: "lg"
  }, /*#__PURE__*/React.createElement(_Card, {
    style: {
      paddingBottom: 0
    }
  }, /*#__PURE__*/React.createElement(_Card.Header, otherData), /*#__PURE__*/React.createElement(_List, null, changeData(data, autoLineFeed).map(function (item) {
    return getFormItem(item, allDisabled);
  }))));
};

var renderListMain = function renderListMain(formData, allDisabled, autoLineFeed) {
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_List, null, changeData(formData, autoLineFeed).map(function (item) {
    return getFormItem(item, allDisabled);
  })));
};

var renderMainList = function renderMainList(type, formData, allDisabled, autoLineFeed) {
  if (type === 'CARD') {
    return renderCardMain(formData, allDisabled, autoLineFeed);
  }

  if (type === 'CARDLIST') {
    return formData.map(function (item) {
      return renderCardMain(item, allDisabled, autoLineFeed);
    });
  }

  if (type === 'NORMALLIST') {
    return formData.map(function (item) {
      return renderListMain(item, allDisabled, autoLineFeed);
    });
  }

  return renderListMain(formData, allDisabled, autoLineFeed);
};

var DynamicForm = function DynamicForm(_ref2) {
  var children = _ref2.children,
      _ref2$data = _ref2.data,
      data = _ref2$data === void 0 ? [] : _ref2$data,
      form = _ref2.form,
      _ref2$allDisabled = _ref2.allDisabled,
      allDisabled = _ref2$allDisabled === void 0 ? false : _ref2$allDisabled,
      _ref2$formsValues = _ref2.formsValues,
      formsValues = _ref2$formsValues === void 0 ? {} : _ref2$formsValues,
      onFinish = _ref2.onFinish,
      _onFinishFailed = _ref2.onFinishFailed,
      onValuesChange = _ref2.onValuesChange,
      isDev = _ref2.isDev,
      _ref2$autoLineFeed = _ref2.autoLineFeed,
      autoLineFeed = _ref2$autoLineFeed === void 0 ? true : _ref2$autoLineFeed;
  useEffect(function () {
    form.setFieldsValue(formsValues);
  }, [formsValues]);
  var dFormType = getDFormType(data); // 开启条件是开发模式，并且data没有传，或者data传空数组[]

  var showAddItem = isDev || nodeEnvIsDev && (!data || data instanceof Array && data.length === 0);
  var rederChildren = renderMainList(dFormType, data, allDisabled, autoLineFeed);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form, {
    form: form,
    initialValues: formsValues,
    onFinish: onFinish,
    onFinishFailed: function onFinishFailed(errorInfo) {
      return defaultFailed(errorInfo, _onFinishFailed);
    },
    onValuesChange: onValuesChange
  }, rederChildren, children), showAddItem && /*#__PURE__*/React.createElement(NewFieldPicker, null));
};

export default DynamicForm;