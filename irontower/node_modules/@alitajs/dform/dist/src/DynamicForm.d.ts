import React, { FC } from 'react';
import { InputItemPropsType } from 'antd-mobile/es/input-item/PropsType';
import { DatePickerPropsType } from 'antd-mobile/es/date-picker/PropsType';
import { CardHeaderPropsType } from 'antd-mobile/es/card/PropsType';
import { Store, FormInstance, ValidateErrorEntity, Rule } from 'rc-field-form/es/interface';
export interface IFormItemProps {
    type: 'input' | 'select' | 'area' | 'date' | 'switch' | 'extraInput' | 'radio' | 'rangeDatePicker' | 'coverRadio' | 'image' | 'custom' | 'multiplePicker' | 'addressPicker' | 'checkbox';
    title: string;
    fieldProps: string;
    required?: boolean;
    placeholder?: string;
    disabled?: boolean;
    data?: any[];
    inputType?: InputItemPropsType['type'];
    modeType?: DatePickerPropsType['mode'];
    fieldProps2?: string;
    placeholder2?: string;
    rules?: Rule[];
    extraType?: 'input' | 'select';
    editable?: boolean;
    rows?: number;
    labelNumber?: number;
    positionType?: 'vertical' | 'horizontal';
    hasStar?: boolean;
    firstProps?: any;
    secondProps?: any;
    radioType?: 'vertical' | 'horizontal';
    selectable?: boolean;
    limitSize?: number;
    CustomDom?: any;
    customDomProps?: any;
    subTitle?: string | React.ReactNode;
    maxValueLength?: number;
    onBlur?: (value?: string) => void;
    level?: number;
    onChangeLevel?: (val: any) => void;
    placeholderList: string[];
}
interface CardDForm extends CardHeaderPropsType {
    data: IFormItemProps[];
}
export declare type DFormData = IFormItemProps[][] | IFormItemProps[] | CardDForm | CardDForm[];
declare type DFormType = 'NORMAL' | 'NORMALLIST' | 'CARD' | 'CARDLIST';
export interface IDynamicFormProps {
    data: DFormData;
    form: FormInstance;
    formsValues?: Store;
    allDisabled?: boolean;
    onFinish?: (values: Store) => void;
    onFinishFailed?: (errorInfo: ValidateErrorEntity) => void;
    isDev?: boolean;
    onValuesChange?: (values: any) => void;
    autoLineFeed?: boolean;
}
export declare const getFormItem: (formItem: IFormItemProps, allDisabled: boolean) => JSX.Element;
export declare const defaultFailed: (errorInfo: ValidateErrorEntity, onFinishFailed?: ((errorInfo: ValidateErrorEntity) => void) | undefined) => void;
/**
 * 根据传进来的数据判断 DForm 的类型
 * @param data
 */
export declare const getDFormType: (data: DFormData) => DFormType;
declare const DynamicForm: FC<IDynamicFormProps>;
export default DynamicForm;
