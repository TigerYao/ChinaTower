"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

var _plugins = require("./plugins");

function _child_process() {
  const data = _interopRequireDefault(require("child_process"));

  _child_process = function _child_process() {
    return data;
  };

  return data;
}

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(api) {
  if (!api.userConfig.native) return;
  const exportsNative = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = api.userConfig.native[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      const plugins = _step.value;

      const nativePlugins = _plugins.supportedPlugins.find(item => item.name === plugins);

      if (nativePlugins) {
        exportsNative.push({
          exportAll: true,
          source: nativePlugins.ionic
        });
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  api.addUmiExports(() => exportsNative);
  api.describe({
    key: 'native',
    config: {
      schema(joi) {
        return joi.array();
      }

    }
  });
  api.registerCommand({
    name: 'native',
    fn: ({
      args
    }) => {
      const _api$userConfig = api.userConfig,
            appType = _api$userConfig.appType,
            native = _api$userConfig.native;

      if (appType !== 'cordova') {
        return;
      }

      const options = {
        cwd: api.paths.cwd
      };
      const ionicNativeCore = '@ionic-native/core';

      if (!(0, _utils.checkDependenceInstalled)(api.paths.cwd || './', ionicNativeCore)) {
        console.log(`${ionicNativeCore} install ...`);

        _child_process().default.execSync(`yarn add ${ionicNativeCore}`, options);
      }

      const nativePlugins = native || [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = nativePlugins[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          const plugin = _step2.value;

          const nativePlugin = _plugins.supportedPlugins.find(item => item.name === plugin);

          if (nativePlugin) {
            const installed = (0, _utils.checkPluginInstalled)(api.paths.cwd || './', nativePlugin);

            if (!installed) {
              console.log(`${plugin} install ...`);

              _child_process().default.execSync(`cordova plugin add ${nativePlugin.cordova} --save`, options);

              _child_process().default.execSync(`yarn add ${nativePlugin.ionic}`, options);
            }
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  });
}