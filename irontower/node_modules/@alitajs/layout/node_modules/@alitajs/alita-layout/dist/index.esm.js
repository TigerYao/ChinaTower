import 'antd-mobile/es/tab-bar/style';
import _TabBar from 'antd-mobile/es/tab-bar';
import 'antd-mobile/es/nav-bar/style';
import _NavBar from 'antd-mobile/es/nav-bar';
import 'antd-mobile/es/icon/style';
import _Icon from 'antd-mobile/es/icon';
import React from 'react';
import { withRouter } from 'react-router-dom';
import DocumentTitle from 'react-document-title';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

/**
 * 像素转换
 * @param {Number} px - 750视觉稿像素
 * @return {Number} 屏幕上实际像素
 */
var px2hd = function px2hd(px) {
  var ONE_REM = parseInt(document.documentElement.style.fontSize || '100', 10) || 100;
  var SCALE = ONE_REM / 100;
  return Number((px * SCALE).toFixed(1));
};

var checkNavBarList = function checkNavBarList(pagePath, lists) {
  var page = lists.filter(function (item) {
    return item.pagePath === pagePath && !!item.navBar;
  });

  if (page && page.length > 0) {
    return page[0].navBar;
  }

  return null;
};

var checkTabsList = function checkTabsList(pagePath, lists, tabsGrouping) {
  var realList = lists;
  var realGroup;
  var page = lists.filter(function (item) {
    return item.pagePath === pagePath;
  });

  if (tabsGrouping && tabsGrouping.length > 0) {
    tabsGrouping.forEach(function (tabsGroup) {
      if (page[0] && tabsGroup.includes(page[0].pagePath)) {
        realGroup = tabsGroup;
      }
    });
  }

  if (realGroup) {
    realList = lists.filter(function (item) {
      return realGroup.includes(item.pagePath);
    });
  }

  return {
    hasTabsBar: page && page.length > 0,
    pageTitle: page[0] ? page[0].title || page[0].text : '',
    realList: realList
  };
};

var checkTitleList = function checkTitleList(pagePath, lists) {
  var page = lists.filter(function (item) {
    return item.pagePath === pagePath;
  });
  return page[0] ? page[0].title : '';
};

var headerRender = function headerRender(_ref) {
  var realNavBar = _ref.realNavBar,
      hasTabsBar = _ref.hasTabsBar,
      realTitle = _ref.realTitle,
      history = _ref.history;
  var defaultIcon = hasTabsBar ? null : React.createElement(_Icon, {
    type: "left"
  });
  var fixed = realNavBar.fixed,
      mode = realNavBar.mode,
      icon = realNavBar.icon,
      onLeftClick = realNavBar.onLeftClick,
      rightContent = realNavBar.rightContent,
      leftContent = realNavBar.leftContent,
      hideNavBar = realNavBar.hideNavBar,
      className = realNavBar.className,
      pageTitle = realNavBar.pageTitle;
  var defaultEvent = onLeftClick || (!hasTabsBar ? history.goBack : function () {});

  if (hideNavBar === true) {
    return null;
  }

  return React.createElement(React.Fragment, null, React.createElement("div", {
    className: "alita-layout-head",
    style: fixed ? {
      position: 'fixed',
      top: 0,
      width: '100%',
      zIndex: 99
    } : {}
  }, React.createElement(_NavBar, {
    mode: mode,
    icon: icon || defaultIcon,
    onLeftClick: defaultEvent,
    rightContent: rightContent,
    leftContent: leftContent,
    className: className
  }, pageTitle || realTitle)), fixed && React.createElement("div", {
    style: {
      height: '0.9rem'
    },
    className: "alita-layout-fixed"
  }));
};

var styleInject = function styleInject() {
  var css = '.am-tab-bar {\n  height: auto !important;\n}';

  if (typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  head.appendChild(style);

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
};

styleInject();

var AlitaLayout = function AlitaLayout(_ref2) {
  var children = _ref2.children,
      pathname = _ref2.location.pathname,
      _ref2$tabBar = _ref2.tabBar,
      tabBar = _ref2$tabBar === void 0 ? {} : _ref2$tabBar,
      documentTitle = _ref2.documentTitle,
      _ref2$titleList = _ref2.titleList,
      titleList = _ref2$titleList === void 0 ? [] : _ref2$titleList,
      history = _ref2.history,
      _ref2$navBar = _ref2.navBar,
      navBar = _ref2$navBar === void 0 ? {} : _ref2$navBar;
  var _ref3 = tabBar,
      _ref3$list = _ref3.list,
      list = _ref3$list === void 0 ? [] : _ref3$list,
      color = _ref3.color,
      selectedColor = _ref3.selectedColor,
      _ref3$backgroungColor = _ref3.backgroungColor,
      backgroungColor = _ref3$backgroungColor === void 0 ? '#FFF' : _ref3$backgroungColor,
      position = _ref3.position,
      _ref3$tabsGroup = _ref3.tabsGroup,
      tabsGroup = _ref3$tabsGroup === void 0 ? [] : _ref3$tabsGroup;
  var navList = navBar.navList;
  var pageNavBar = null;

  if (navList) {
    pageNavBar = checkNavBarList(pathname, navList);
  }

  var realNavBar = _objectSpread2({}, navBar, {}, pageNavBar);

  var pageBackground = realNavBar.pageBackground;

  var _checkTabsList = checkTabsList(pathname, list, tabsGroup),
      hasTabsBar = _checkTabsList.hasTabsBar,
      pageTitle = _checkTabsList.pageTitle,
      realList = _checkTabsList.realList;

  var isTabsApp = list.length > 0;
  var titleListItem = checkTitleList(pathname, titleList);
  var realTitle = titleListItem || pageTitle || documentTitle || '';
  return React.createElement(DocumentTitle, {
    title: realTitle
  }, React.createElement("div", {
    style: {
      height: '100vh',
      background: pageBackground || '#FFF'
    }
  }, React.createElement("div", {
    style: {
      height: document.documentElement.clientHeight - px2hd(hasTabsBar ? 100 : 0),
      maxHeight: document.documentElement.clientHeight - px2hd(hasTabsBar ? 100 : 0),
      overflow: 'auto'
    }
  }, headerRender({
    hasTabsBar: hasTabsBar,
    realNavBar: realNavBar,
    realTitle: realTitle,
    history: history
  }), children), isTabsApp && hasTabsBar && React.createElement(React.Fragment, null, React.createElement(_TabBar, {
    tabBarPosition: position,
    unselectedTintColor: color,
    tintColor: selectedColor,
    barTintColor: backgroungColor,
    noRenderContent: true
  }, realList.map(function (item) {
    return React.createElement(_TabBar.Item, {
      title: item.text,
      icon: React.createElement("div", {
        style: {
          width: "".concat(item.iconSize || '0.44rem'),
          height: "".concat(item.iconSize || '0.44rem'),
          background: "url(".concat(item.iconPath, ") center center /  ").concat(item.iconSize || '0.44rem', " ").concat(item.iconSize || '0.44rem', " no-repeat")
        }
      }),
      selectedIcon: React.createElement("div", {
        style: {
          width: "".concat(item.iconSize || '0.44rem'),
          height: "".concat(item.iconSize || '0.44rem'),
          background: "url(".concat(item.selectedIconPath, ") center center /  ").concat(item.iconSize || '0.44rem', " ").concat(item.iconSize || '0.44rem', " no-repeat")
        }
      }),
      selected: pathname === item.pagePath,
      badge: item.badge,
      onPress: function onPress() {
        if (pathname === item.pagePath) return;

        if (item.onPress) {
          item.onPress();
        } else {
          history.push(item.pagePath);
        }
      },
      key: item.pagePath
    });
  })))));
};

var index = withRouter(AlitaLayout);

export default index;
