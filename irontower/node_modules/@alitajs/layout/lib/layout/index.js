"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _umi = require("umi");

var _alitaLayout = _interopRequireDefault(require("@alitajs/alita-layout"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var changeNavBarConfig = function changeNavBarConfig(preConfig, changeData) {
  if (!changeData) return preConfig;

  var _ref = preConfig,
      navList = _ref.navList,
      other = _objectWithoutProperties(_ref, ["navList"]);

  if (!navList || navList.length === 0) {
    var config = [];
    Object.keys(changeData).forEach(function (i) {
      config.push({
        pagePath: i,
        navBar: changeData[i]
      });
    });
    return _objectSpread({}, other, {
      navList: config
    });
  }

  var newNavList = navList.map(function (i) {
    if (changeData[i.pagePath]) {
      i.navBar = _objectSpread({}, i.navBar, {}, changeData[i.pagePath]);
    }

    return i;
  });
  return _objectSpread({}, other, {
    navList: newNavList
  });
};

var changeTabBarListConfig = function changeTabBarListConfig(preConfig, changeData) {
  if (!changeData) return preConfig;

  var _ref2 = preConfig,
      list = _ref2.list,
      other = _objectWithoutProperties(_ref2, ["list"]);

  if (!list || list.length === 0) {
    return preConfig;
  }

  var newNavList = list.map(function (i) {
    if (changeData[i.pagePath]) {
      i = _objectSpread({}, i, {}, changeData[i.pagePath]);
    }

    return i;
  });
  return _objectSpread({}, other, {
    list: newNavList
  });
};

var BasicLayout = function BasicLayout(props) {
  var _useState = (0, _react.useState)({}),
      _useState2 = _slicedToArray(_useState, 2),
      pageNavBar = _useState2[0],
      setPageNavBar = _useState2[1];

  var _useState3 = (0, _react.useState)({}),
      _useState4 = _slicedToArray(_useState3, 2),
      tabBarList = _useState4[0],
      setTabBarList = _useState4[1];

  var children = props.children,
      layoutConfig = props.layoutConfig,
      hasKeepAlive = props.hasKeepAlive,
      otherProps = _objectWithoutProperties(props, ["children", "layoutConfig", "hasKeepAlive"]);

  var titleList = layoutConfig.titleList,
      documentTitle = layoutConfig.documentTitle,
      navBar = layoutConfig.navBar,
      tabBar = layoutConfig.tabBar;
  (0, _react.useEffect)(function () {
    setPageNavBar((0, _umi.getPageNavBar)());
    setTabBarList((0, _umi.getTabBarList)());
  }, [props.location.pathname]);

  _umi.layoutEmitter.useSubscription(function () {
    setPageNavBar((0, _umi.getPageNavBar)());
    setTabBarList((0, _umi.getTabBarList)());
  });

  var newNavBar = changeNavBarConfig(navBar, pageNavBar);
  var newTabBarList = changeTabBarListConfig(tabBar, tabBarList);
  var layout = {
    documentTitle: documentTitle,
    navBar: newNavBar,
    tabBar: newTabBarList,
    titleList: titleList
  };
  return _react.default.createElement(_alitaLayout.default, layout, hasKeepAlive && _react.default.createElement(_umi.KeepAliveLayout, otherProps, children), !hasKeepAlive && children);
};

var _default = BasicLayout;
exports.default = _default;