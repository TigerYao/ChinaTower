"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = function _default(absTmpPath) {
  return "\nimport React, { FC, useState } from 'react';\nimport { Tabs } from 'antd';\nimport { history } from '../core/history';\nimport { routes } from '".concat(absTmpPath, "/core/routes';\n\nconst isKeepPath = (aliveList: any[], path: string) => {\n  let isKeep = false;\n  aliveList.map(item => {\n    if (item === path) {\n      isKeep = true;\n    }\n    if (item instanceof RegExp && item.test(path)) {\n      isKeep = true;\n    }\n  })\n  return isKeep;\n}\nconst getKeepAliveViewMap = (routeList: any[], aliveList: any[]) => {\n  let keepAliveMap = {};\n  function find(routess: any[], list: any[]) {\n    if (!routess || !list) {\n      return routess;\n    }\n    return routess.map(element => {\n      if (isKeepPath(list, element.path.toLowerCase())) {\n        element.recreateTimes = 0;\n        keepAliveMap[element.path.toLowerCase()] = element;\n      }\n      if(Array.isArray(element.routes)){\n        element.routes = find(element.routes, aliveList);\n      }\n      return element;\n    });\n  }\n  find(routeList, aliveList)\n  return keepAliveMap;\n}\n\nconst getPageView = (keepAliveView, path) => {\n  let TrueView = false;\n  const pathArr = path.split('/');\n  const pathKey = [];\n  for (let k = pathArr.length; k >= 0; k--) {\n    pathKey.push(pathArr.join('/'));\n    pathArr.length = k;\n  }\n  pathKey.forEach(key => {\n    if (key !== path && keepAliveView[key] && keepAliveView[key].component) {\n      TrueView = true;\n    }\n  });\n  return TrueView ? null : keepAliveView[path].component;\n}\n\nconst { TabPane } = Tabs;\n\ninterface PageProps {\n  location: {\n    pathname: string;\n  };\n  keepalive: [];\n}\n\nconst BasicLayout: FC<PageProps> = (props) => {\n  const { location: { pathname }, children } = props;\n  const [activeKey, setActiveKey] = useState('');\n  const [delectKey, setDelectKey] = useState('');\n  const [panels, setPanels] = useState([]);\n  const [keepAliveViewMap, setKeepAliveViewMap] = useState(getKeepAliveViewMap(routes, props.keepalive));\n  const showKeepAlive = !!keepAliveViewMap[pathname];\n  if (showKeepAlive) {\n    const index = panels.findIndex(\n      tPathname => tPathname === pathname,\n    );\n    if (index === -1) {\n      if (delectKey !== pathname) {\n        panels.push(pathname);\n        setPanels(panels);\n      } else {\n        setTimeout(() => setDelectKey(''), 1000);\n      }\n    }\n    if(pathname !== activeKey){\n      setActiveKey(pathname);\n    }\n  }\n  const onEdit = (targetKey, action) => {\n    let lastIndex;\n    let lastActiveKey;\n    panels.forEach((pane, i) => {\n      if (pane.key === targetKey) {\n        lastIndex = i - 1;\n      }\n    });\n    const panes = panels.filter(pane => pane !== targetKey);\n    if (panes.length && activeKey === targetKey) {\n      if (lastIndex >= 0) {\n        lastActiveKey = panes[lastIndex];\n      } else {\n        lastActiveKey = panes[0]\n      }\n    }\n    setPanels(panes);\n    setActiveKey(lastActiveKey);\n    if (targetKey === pathname) {\n      setDelectKey(targetKey);\n      history.push(lastActiveKey);\n    }\n  };\n  return (\n    <>\n      <div hidden={!showKeepAlive} className=\"rumtime-tabs-layout\" >\n        <Tabs\n          onChange={(targetKey)=>{\n            history.push(targetKey)\n          }}\n          activeKey={activeKey}\n          type=\"editable-card\"\n          onEdit={onEdit}\n          hideAdd\n        >\n        {panels.map(curPathname => {\n          const View = getPageView(keepAliveViewMap, curPathname);\n          return View ? (\n            <TabPane tab={keepAliveViewMap[curPathname].title || curPathname} key={curPathname}>\n              <View {...props} />\n            </TabPane>\n          ) : <TabPane tab={keepAliveViewMap[curPathname].title || curPathname} key={curPathname}>\n              {children}\n            </TabPane>;\n        })}\n        </Tabs>\n      </div>\n      {!showKeepAlive && children}\n    </>)\n}\nexport default BasicLayout;\n");
};

exports.default = _default;