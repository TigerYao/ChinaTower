"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = api => {
  api.describe({
    key: 'appType',
    config: {
      schema(joi) {
        return joi.string();
      },

      default: 'h5'
    }
  });

  if (api.userConfig.appType !== 'pc') {
    api.modifyDefaultConfig(memo => {
      return _objectSpread({}, memo, {
        hd: {} // lessLoader: {
        //   modifyVars: {
        //     'hack': `true; @import "~antd-mobile/es/style/themes/default.less";`
        //   }
        // }

      });
    });
    api.addHTMLMetas(() => {
      const addItem = {
        "content": "telephone=no",
        "name": "format-detection"
      };
      return [addItem];
    });
    api.addHTMLStyles(() => {
      const addItem = {
        "content": `* {
            padding: 0;
            margin: 0;
            box-sizing: border-box;
          }
          html,
          body,
          #root {
            width: 100%;
            height: 100vh;
          }
          #root > div {
            /* Status bar height on iOS 11.0 */
            padding-top: constant(safe-area-inset-top);
            padding-bottom: constant(safe-area-inset-bottom);
            /* Status bar height on iOS 11+ */
            padding-top: calc(env(safe-area-inset-top) * 2);
            padding-bottom: calc(env(safe-area-inset-bottom) * 2);
          }

          .alita-layout-head {
            top: calc(env(safe-area-inset-top) * 2) !important;
          }
          body {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-overflow-scrolling: touch;
          }
          input {
            border: none;
            outline: none;
          }
          #root {
            position: relative;
            overflow: scroll;
          }
          textarea:disabled,
          input:disabled {
            background-color: transparent;
          }`
      };
      return [addItem];
    });
  } else {// api.modifyDefaultConfig(memo => {
    //   return {
    //     ...memo,
    //     lessLoader: {
    //       modifyVars: {
    //         'hack': `true; @import "~antd/es/style/themes/default.less";`
    //       }
    //     }
    //   }
    // });
  }
};

exports.default = _default;