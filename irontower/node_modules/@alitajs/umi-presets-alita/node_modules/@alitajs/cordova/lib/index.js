"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _cordovaCommon() {
  const data = require("cordova-common");

  _cordovaCommon = function _cordovaCommon() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = require("fs-extra");

  _fsExtra = function _fsExtra() {
    return data;
  };

  return data;
}

function _child_process() {
  const data = _interopRequireDefault(require("child_process"));

  _child_process = function _child_process() {
    return data;
  };

  return data;
}

var _createCordova = _interopRequireDefault(require("./create-cordova"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _default(api) {
  if (!api.userConfig.cordova) {
    api.userConfig.cordova = {};
  }

  const isProduction = process.env.NODE_ENV === 'production';
  const cordovaPlatform = process.env.CORDOVA || 'ios';
  const isAlita = process.env.IS_ALITA && process.env.IS_ALITA !== 'none';
  const packageId = isAlita ? api.userConfig.packageId : api.userConfig.cordova.packageId;
  const displayName = isAlita ? api.userConfig.displayName : api.userConfig.cordova.displayName;
  api.describe({
    key: 'cordova',
    config: {
      schema(joi) {
        return joi.object({
          packageId: joi.string(),
          displayName: joi.string()
        });
      }

    }
  }); // dev
  // 1.cordova create

  api.registerCommand({
    name: 'cordova',
    fn: ({
      args
    }) => {
      if (api.userConfig.appType !== 'cordova') {
        console.error('cordova 命令，appType 必须为 cordova，请修改配置 appType');
        return;
      }

      if (!packageId) {
        console.error('config/config.ts 中 packageId 是必填项，请增加配置 packageId');
        return;
      }

      if (/-/.test(packageId)) {
        console.error('config/config.ts 中 packageId 不允许包含"-",因为会导致cordova项目初始化失败');
        return;
      }

      if (!displayName) {
        console.error('config/config.ts 中 displayName 是必填项，请增加配置 displayName');
        return;
      }

      const addPlatforms = isIos => {
        _child_process().default.exec(`cordova platforms add ${isIos ? 'ios' : 'android'}`, (error, stdout, stderr) => {
          if (error) {
            console.error(`exec error: ${error}`);
          } else {
            if (!isIos) {
              (0, _utils.supportViewPortForAndroid)(api.paths.cwd);
            } else {
              (0, _utils.fixScrollIssueForIOS)(api.paths.cwd);
            }
          }

          console.log(stdout);
          console.log(stderr);
        });

        console.log(`cordova add ${isIos ? 'ios' : 'android'} platforms ...`);
      };

      if (args.init) {
        (0, _createCordova.default)(api.paths.cwd, packageId, displayName, {}, _cordovaCommon().events).then(value => {
          if (args.ios || args.android) {
            addPlatforms(!!args.ios);
          } else {
            console.log(`cordova init success,please run "${isAlita ? 'alita' : 'umi'} cordova --ios" or "${isAlita ? 'alita' : 'umi'} cordova --android"  to add cordova platforms`);
          }
        }, error => {
          console.error(error.message);
        });
      } else if (args.ios || args.android) {
        addPlatforms(!!args.ios);
      }
    }
  });
  const defaultOptions = {
    // build目录默认为www
    outputPath: 'www',
    history: {
      type: 'hash'
    },
    base: './',
    publicPath: './',
    metas: [{
      content: 'no',
      name: 'msapplication-tap-highlight'
    }]
  };
  api.modifyDefaultConfig(memo => {
    return _objectSpread({}, memo, {}, defaultOptions);
  });

  if (!(process.env.ALITA_NOW_COMMAND === 'dev' || process.env.ALITA_NOW_COMMAND === 'build')) {
    return;
  }

  const configPath = (0, _path().join)(api.paths.cwd || '', 'config.xml');
  const platformsPath = (0, _path().join)(api.paths.cwd || '', 'platforms');

  if ((0, _fsExtra().existsSync)(configPath) && (0, _fsExtra().existsSync)(platformsPath) && (0, _fsExtra().readdirSync)(platformsPath).length > 0) {
    console.log(`cordova platform use ${cordovaPlatform}`); // 3.node config-xml.js true
    // console.log(api);

    (0, _utils.setCordovaConfig)(api.paths.cwd, isProduction); // 4.cordova build ios
    // api.devServerPort 需要提交PR来支持

    _child_process().default.exec(`cordova build ${cordovaPlatform}`, {}, (error, stdout, stderr) => {
      if (error) {
        console.error(`exec error: ${error}`);
      }

      console.log(stdout);
      console.log(stderr);
    }); // 5.node serve-cordova.js ios


    const dirToServe = (0, _path().join)(api.paths.cwd || '', 'platforms', cordovaPlatform, 'platform_www');
    const servePort = 8723;

    const serveProcess = _child_process().default.exec(`serve -l ${servePort}`, {
      stdio: 'inherit',
      cwd: dirToServe
    }, (error, stdout) => {
      console.error(error.message);
      console.log(stdout.toString('utf8'));
    });

    console.log(`cordova serve(pid:${serveProcess.pid})`); // 6.add app.js
    //  export function render(oldRender) {
    //    function onDeviceReady() {
    //      oldRender();
    //    }
    //    document.addEventListener('deviceready', onDeviceReady, false);
    //  }

    api.addRuntimePlugin(() => (0, _path().join)(__dirname, './runtime')); // 7.add cordova.js
    //  <% if(context.env === 'production') { %>
    //    <script src="./cordova.js"></script>
    //  <% } else {%>
    //    <script src="http://192.168.3.111:8001/cordova.js"></script>
    //  <% } %>

    const ip = (0, _utils.getIpAddress)();
    let cordovaSrc = './cordova.js';

    if (!isProduction) {
      cordovaSrc = `http://${ip}:${servePort}/cordova.js`;
    }

    api.addHTMLScripts(() => {
      return [{
        src: cordovaSrc
      }];
    }); // 8.umi dev
    // build
    // 1. outputPath:'www',
    // 2. umi build

    api.onBuildComplete(() => {
      console.log(`[${isAlita ? 'alita' : 'umi'}]: success`);
      console.log(`[${isAlita ? 'alita' : 'umi'}]: run build cordova ...`); // 3. node config-xml.js false

      (0, _utils.setCordovaConfig)(api.paths.cwd, isProduction); // 4. cordova build ios

      _child_process().default.exec(`cordova build ${cordovaPlatform}`, {}, (error, stdout, stderr) => {
        if (error) {
          console.error(`exec error: ${error}`);
        }

        console.log(stdout);
        console.log(stderr);
        process.exit();
      });
    });
  } else {
    console.log(`please run "${isAlita ? 'alita' : 'umi'} cordova --init --ios" to init cordova and add cordova platform`);
  }
}