"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = function _default(absTmpPath) {
  return "\nimport React from 'react';\nimport { routes } from '".concat(absTmpPath, "/core/routes';\nimport { setLayoutInstance } from './KeepAliveModel';\nconst isKeepPath = (aliveList:any[],path:string)=>{\n  let isKeep = false;\n  aliveList.map(item=>{\n    if(item === path){\n      isKeep = true;\n    }\n    if(item instanceof RegExp && item.test(path)){\n      isKeep = true;\n    }\n    if(typeof item === 'string' && item.toLowerCase() === path){\n      isKeep = true;\n    }\n  })\n  return isKeep;\n}\nconst getKeepAliveViewMap = (routeList:any[],aliveList:any[])=>{\n  let keepAliveMap = {};\n  function find(routess: any[], list:any[]) {\n    if(!routess|| !list ){\n      return routess;\n    }\n    return routess.map(element => {\n      if (!Array.isArray(element.routes)&&isKeepPath(list,element.path.toLowerCase())) {\n        element.recreateTimes = 0;\n        keepAliveMap[element.path.toLowerCase()] = element;\n      }else{\n        element.routes = find(element.routes,aliveList);\n      }\n      return element;\n    });\n  }\n  find(routeList,aliveList)\n  return keepAliveMap;\n}\n\ninterface PageProps {\n  location: {\n    pathname: string;\n  };\n}\nexport default class BasicLayout extends React.PureComponent<PageProps> {\n  constructor(props: any) {\n    super(props);\n    this.keepAliveViewMap = getKeepAliveViewMap(routes,props.keepalive);\n  }\n  componentDidMount() {\n    setLayoutInstance(this);\n  }\n\n  keepAliveViewMap = {};\n\n  alivePathnames: string[] = [];\n\n  render() {\n    const {\n      location: { pathname },\n    } = this.props;\n    const showKeepAlive = !!this.keepAliveViewMap[pathname.toLowerCase()];\n    if (showKeepAlive) {\n      const index = this.alivePathnames.findIndex(\n        tPathname => tPathname === pathname.toLowerCase(),\n      );\n      if (index === -1) {\n        this.alivePathnames.push(pathname.toLowerCase());\n      }\n    }\n    return (\n      <>\n        <div\n          style={{ position: 'relative' }}\n          hidden={!showKeepAlive}\n          className=\"rumtime-keep-alive-layout\"\n        >\n          {this.alivePathnames.map(curPathname => {\n            const View = this.keepAliveViewMap[curPathname].component;\n            return View ? (\n              <div\n                id={`BasicLayout-${curPathname}`}\n                key={\n                  curPathname + this.keepAliveViewMap[curPathname].recreateTimes\n                }\n                style={{\n                  position: 'absolute',\n                  left: 0,\n                  top: 0,\n                  right: 0,\n                  bottom: 0,\n                }}\n                hidden={curPathname !== pathname.toLowerCase()}\n              >\n                <View {...this.props} />\n              </div>\n            ) : null;\n          })}\n        </div>\n        <div hidden={showKeepAlive} className=\"rumtime-keep-alive-layout-no\">\n          {!showKeepAlive && this.props.children}\n        </div>\n      </>\n    )\n  }\n}\n");
};

exports.default = _default;